/*JAMES GRAMAJO COMPILADORES1 201731172*/
package Analizadores;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import Objetos.*;


parser code
{:
	ArrayList<Usuario> lstUsuario = new ArrayList();
	ArrayList<Catedratico> lstCatedratico = new ArrayList();
	ArrayList<Curso> lstCurso = new ArrayList();
	ArrayList<Edificio> lstEdificio = new ArrayList();
	ArrayList<Estudiante> lstEstudiante = new ArrayList();
	ArrayList<Horario> lstHorario = new ArrayList();
	ArrayList<Salon> lstSalon = new ArrayList();


	Usuario usuario;
	Catedratico catedratico;
	Curso curso;
	Edificio edificio;
	Estudiante estudiante;
	Horario horario;
	Salon salon;
	


    //constructor
	public parser( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	public void syntax_error(Symbol curl_token){
		

		System.out.println("\nSE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
	}
	protected int error_sync_size() {
        return 1;
    }

	public ArrayList<Usuario> getLstUsuario() {
        return lstUsuario;
    }

    public ArrayList<Catedratico> getLstCatedratico() {
        return lstCatedratico;
    }
    public ArrayList<Curso> getLstCurso() {
        return lstCurso;
    }

    public ArrayList<Edificio> getLstEdificio() {
        return lstEdificio;
    }

    public void setLstEdificio(ArrayList<Edificio> lstEdificio) {
        this.lstEdificio = lstEdificio;
    }

    public ArrayList<Estudiante> getLstEstudiante() {
        return lstEstudiante;
    }


    public ArrayList<Horario> getLstHorario() {
        return lstHorario;
    }


    public ArrayList<Salon> getLstSalon() {
        return lstSalon;
    }


:};

terminal ESTUDIANTE, NUMEROS, USUARIO, CATEDRATICO, EDIFICIO, SALON, CURSO, HORARIO, ASIGNAR, COMILLA, COMA, PUNTO_COMA, PARENTESIS_ABRE, PARENTESIS_CIERRA, TEXTO, COLABORADOR;

non terminal estado_inicial, parametros, usuario, estudiante, catedratico, edificio, salon, curso, horario, asignar, student_colab;

start with estado_inicial;

estado_inicial::=
	parametros

	
;
parametros::=
	estudiante parametros
	| usuario parametros
	| catedratico parametros
	| edificio parametros
	| salon parametros
	| curso parametros
	| horario parametros
	| asignar parametros
	| estudiante
	| usuario
	| catedratico
	| edificio
	| salon
	| curso
	| horario
	| asignar


;
estudiante::=
	ESTUDIANTE PARENTESIS_ABRE NUMEROS:a COMA COMILLA TEXTO:b COMILLA COMA COMILLA TEXTO:c COMILLA  PARENTESIS_CIERRA PUNTO_COMA
	{: estudiante = new Estudiante(Integer.parseInt(a.toString()), b.toString(),c.toString());  lstEstudiante.add(estudiante); :}
;
usuario::=
	USUARIO PARENTESIS_ABRE NUMEROS:a COMA TEXTO:b COMA COMILLA TEXTO:c COMILLA COMA COMILLA TEXTO:d COMILLA COMA student_colab:e PARENTESIS_CIERRA PUNTO_COMA
	{: usuario = new Usuario(a.toString(),b.toString(), c.toString(),d.toString(),e.toString());  lstUsuario.add(usuario); :}
	
	| USUARIO PARENTESIS_ABRE NUMEROS:a COMA TEXTO:b COMA COMILLA TEXTO:c COMILLA  COMA student_colab:d PARENTESIS_CIERRA PUNTO_COMA
	{: usuario = new Usuario(a.toString(),b.toString(), c.toString(),d.toString()); lstUsuario.add(usuario); :}

;
catedratico::=
	CATEDRATICO PARENTESIS_ABRE NUMEROS:a COMA COMILLA TEXTO:b COMILLA COMA COMILLA TEXTO:c COMILLA PARENTESIS_CIERRA PUNTO_COMA
	{: catedratico = new Catedratico(Integer.parseInt(a.toString()), b.toString(),c.toString()); lstCatedratico.add(catedratico); :}
;
edificio::=
	EDIFICIO PARENTESIS_ABRE COMILLA TEXTO:a COMILLA PARENTESIS_CIERRA PUNTO_COMA
	{: edificio = new Edificio(a.toString()); lstEdificio.add(edificio); :}

;
salon::=
	SALON PARENTESIS_ABRE COMILLA TEXTO:a COMILLA COMA NUMEROS:b COMA NUMEROS:c PARENTESIS_CIERRA PUNTO_COMA
	{: salon = new Salon(a.toString(),b.toString(),c.toString()); lstSalon.add(salon); :}
;
curso::=
	CURSO PARENTESIS_ABRE NUMEROS:a COMA COMILLA TEXTO:b COMILLA COMA NUMEROS:c COMA NUMEROS:d PARENTESIS_CIERRA PUNTO_COMA
	{: curso = new Curso(a.toString(),b.toString(),c.toString(), d.toString()); lstCurso.add(curso); :}
;

horario::=
	HORARIO PARENTESIS_ABRE NUMEROS:a COMA COMILLA TEXTO:b COMILLA COMA COMILLA TEXTO:c COMILLA COMA NUMEROS:d COMA NUMEROS:e COMA TEXTO:f COMA NUMEROS:g PARENTESIS_CIERRA PUNTO_COMA
	//String id, String horario, String dia, String curso, int salon, String edificio, int catedratico
	{: horario= new Horario(Integer.parseInt(a.toString()),b.toString(),c.toString(),d.toString(),Integer.parseInt(e.toString()),f.toString(),Integer.parseInt(g.toString())); lstHorario.add(horario); :}
;
asignar::=
	ASIGNAR PARENTESIS_ABRE NUMEROS COMA NUMEROS COMA NUMEROS COMA NUMEROS PARENTESIS_CIERRA PUNTO_COMA

;
student_colab::=
	ESTUDIANTE
	| COLABORADOR 
;






